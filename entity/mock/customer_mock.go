// Code generated by MockGen. DO NOT EDIT.
// Source: entity/repository.go

// Package mock_entity is a generated GoMock package.
package mock_entity

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCustomerRepository is a mock of CustomerRepository interface
type MockCustomerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerRepositoryMockRecorder
}

// MockCustomerRepositoryMockRecorder is the mock recorder for MockCustomerRepository
type MockCustomerRepositoryMockRecorder struct {
	mock *MockCustomerRepository
}

// NewMockCustomerRepository creates a new mock instance
func NewMockCustomerRepository(ctrl *gomock.Controller) *MockCustomerRepository {
	mock := &MockCustomerRepository{ctrl: ctrl}
	mock.recorder = &MockCustomerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCustomerRepository) EXPECT() *MockCustomerRepositoryMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockCustomerRepository) Insert(Name string, UniqueID, UniqueClientID, Source int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", Name, UniqueID, UniqueClientID, Source)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockCustomerRepositoryMockRecorder) Insert(Name, UniqueID, UniqueClientID, Source interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockCustomerRepository)(nil).Insert), Name, UniqueID, UniqueClientID, Source)
}
